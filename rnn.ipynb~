{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2024-05-21T08:24:11.849915900Z",
     "start_time": "2024-05-21T08:23:59.252394600Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Start\n",
      "Epoch:    0, Loss: 0.17931\n",
      "Epoch:   64, Loss: 0.01201\n",
      "Epoch:  128, Loss: 0.00504\n",
      "Epoch:  192, Loss: 0.00204\n",
      "Epoch:  256, Loss: 0.00153\n",
      "Epoch:  320, Loss: 0.00129\n",
      "Save in: ./net.pth\n",
      "L1: 0.190    L2: 0.060\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "from torch import nn\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\"\"\"\n",
    "Github: Yonv1943 Zen4 Jia1 hao2\n",
    "https://github.com/Yonv1943/DL_RL_Zoo/blob/master/RNN\n",
    "\n",
    "The source of training data \n",
    "https://github.com/L1aoXingyu/\n",
    "code-of-learn-deep-learning-with-pytorch/blob/master/\n",
    "chapter5_RNN/time-series/lstm-time-series.ipynb\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def run_train_gru():\n",
    "    inp_dim = 3\n",
    "    out_dim = 1\n",
    "    batch_size = 12 * 4\n",
    "\n",
    "    '''load data'''\n",
    "    data = load_data()\n",
    "    data_x = data[:-1, :]\n",
    "    data_y = data[+1:, 0]\n",
    "    assert data_x.shape[1] == inp_dim\n",
    "\n",
    "    train_size = int(len(data_x) * 0.75)\n",
    "\n",
    "    train_x = data_x[:train_size]\n",
    "    train_y = data_y[:train_size]\n",
    "    train_x = train_x.reshape((train_size, inp_dim))\n",
    "    train_y = train_y.reshape((train_size, out_dim))\n",
    "\n",
    "    '''build model'''\n",
    "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "    net = RegGRU(inp_dim, out_dim, mod_dim=12, mid_layers=2).to(device)\n",
    "    criterion = nn.MSELoss()\n",
    "    optimizer = torch.optim.Adam(net.parameters(), lr=1e-2)\n",
    "\n",
    "    '''train'''\n",
    "    var_x = torch.tensor(train_x, dtype=torch.float32, device=device)\n",
    "    var_y = torch.tensor(train_y, dtype=torch.float32, device=device)\n",
    "\n",
    "    batch_var_x = list()\n",
    "    batch_var_y = list()\n",
    "\n",
    "    for i in range(batch_size):\n",
    "        j = train_size - i\n",
    "        batch_var_x.append(var_x[j:])\n",
    "        batch_var_y.append(var_y[j:])\n",
    "\n",
    "    from torch.nn.utils.rnn import pad_sequence\n",
    "    batch_var_x = pad_sequence(batch_var_x)\n",
    "    batch_var_y = pad_sequence(batch_var_y)\n",
    "\n",
    "    with torch.no_grad():\n",
    "        weights = np.tanh(np.arange(len(train_y)) * (np.e / len(train_y)))\n",
    "        weights = torch.tensor(weights, dtype=torch.float32, device=device)\n",
    "\n",
    "    for e in range(256):\n",
    "        out = net(batch_var_x)\n",
    "\n",
    "        # loss = criterion(out, batch_var_y)\n",
    "        loss = (out - batch_var_y) ** 2 * weights\n",
    "        loss = loss.mean()\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        if e % 100 == 0:\n",
    "            print('Epoch: {}, Loss: {:.5f}'.format(e, loss.item()))\n",
    "\n",
    "    '''eval'''\n",
    "    net = net.eval()\n",
    "\n",
    "    test_x = data_x.copy()\n",
    "    test_x[train_size:, 0] = 0\n",
    "    test_x = test_x[:, np.newaxis, :]\n",
    "    test_x = torch.tensor(test_x, dtype=torch.float32, device=device)\n",
    "    for i in range(train_size, len(data) - 2):\n",
    "        test_y = net(test_x[:i])\n",
    "        test_x[i + 1, 0, 0] = test_y[-1]\n",
    "    pred_y = test_x[1:, 0, 0]\n",
    "    pred_y = pred_y.cpu().data.numpy()\n",
    "\n",
    "    diff_y = pred_y[train_size:] - data_y[train_size:-1]\n",
    "    l1_loss = np.mean(np.abs(diff_y))\n",
    "    l2_loss = np.mean(diff_y ** 2)\n",
    "    print(\"L1: {:.3f}    L2: {:.3f}\".format(l1_loss, l2_loss))\n",
    "    plt.plot(pred_y, 'r', label='pred')\n",
    "    plt.plot(data_y, 'b', label='real')\n",
    "    plt.legend(loc='best')\n",
    "    plt.pause(4)\n",
    "\n",
    "\n",
    "def run_train_lstm():\n",
    "    inp_dim = 3\n",
    "    out_dim = 1\n",
    "    mid_dim = 8\n",
    "    mid_layers = 1\n",
    "    batch_size = 12 * 4\n",
    "    mod_dir = '.'\n",
    "\n",
    "    '''load data'''\n",
    "    data = load_data()\n",
    "    data_x = data[:-1, :]\n",
    "    data_y = data[+1:, 0]\n",
    "    assert data_x.shape[1] == inp_dim\n",
    "\n",
    "    train_size = int(len(data_x) * 0.75)\n",
    "\n",
    "    train_x = data_x[:train_size]\n",
    "    train_y = data_y[:train_size]\n",
    "    train_x = train_x.reshape((train_size, inp_dim))\n",
    "    train_y = train_y.reshape((train_size, out_dim))\n",
    "\n",
    "    '''build model'''\n",
    "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "    net = RegLSTM(inp_dim, out_dim, mid_dim, mid_layers).to(device)\n",
    "    criterion = nn.MSELoss()\n",
    "    optimizer = torch.optim.Adam(net.parameters(), lr=1e-2)\n",
    "\n",
    "    '''train'''\n",
    "    var_x = torch.tensor(train_x, dtype=torch.float32, device=device)\n",
    "    var_y = torch.tensor(train_y, dtype=torch.float32, device=device)\n",
    "\n",
    "    batch_var_x = list()\n",
    "    batch_var_y = list()\n",
    "\n",
    "    for i in range(batch_size):\n",
    "        j = train_size - i\n",
    "        batch_var_x.append(var_x[j:])\n",
    "        batch_var_y.append(var_y[j:])\n",
    "\n",
    "    from torch.nn.utils.rnn import pad_sequence\n",
    "    batch_var_x = pad_sequence(batch_var_x)\n",
    "    batch_var_y = pad_sequence(batch_var_y)\n",
    "\n",
    "    with torch.no_grad():\n",
    "        weights = np.tanh(np.arange(len(train_y)) * (np.e / len(train_y)))\n",
    "        weights = torch.tensor(weights, dtype=torch.float32, device=device)\n",
    "\n",
    "    print(\"Training Start\")\n",
    "    for e in range(384):\n",
    "        out = net(batch_var_x)\n",
    "    \n",
    "        # loss = criterion(out, batch_var_y)\n",
    "        loss = (out - batch_var_y) ** 2 * weights\n",
    "        loss = loss.mean()\n",
    "    \n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "    \n",
    "        if e % 64 == 0:\n",
    "            print('Epoch: {:4}, Loss: {:.5f}'.format(e, loss.item()))\n",
    "    torch.save(net.state_dict(), '{}/net.pth'.format(mod_dir))\n",
    "    print(\"Save in:\", '{}/net.pth'.format(mod_dir))\n",
    "\n",
    "    '''eval'''\n",
    "    net.load_state_dict(torch.load('{}/net.pth'.format(mod_dir), map_location=lambda storage, loc: storage))\n",
    "    net = net.eval()\n",
    "\n",
    "    test_x = data_x.copy()\n",
    "    test_x[train_size:, 0] = 0\n",
    "    test_x = test_x[:, np.newaxis, :]\n",
    "    test_x = torch.tensor(test_x, dtype=torch.float32, device=device)\n",
    "\n",
    "    '''simple way but no elegant'''\n",
    "    # for i in range(train_size, len(data) - 2):\n",
    "    #     test_y = net(test_x[:i])\n",
    "    #     test_x[i, 0, 0] = test_y[-1]\n",
    "\n",
    "    '''elegant way but slightly complicated'''\n",
    "    eval_size = 1\n",
    "    zero_ten = torch.zeros((mid_layers, eval_size, mid_dim), dtype=torch.float32, device=device)\n",
    "    test_y, hc = net.output_y_hc(test_x[:train_size], (zero_ten, zero_ten))\n",
    "    test_x[train_size + 1, 0, 0] = test_y[-1]\n",
    "    for i in range(train_size + 1, len(data) - 2):\n",
    "        test_y, hc = net.output_y_hc(test_x[i:i + 1], hc)\n",
    "        test_x[i + 1, 0, 0] = test_y[-1]\n",
    "    pred_y = test_x[1:, 0, 0]\n",
    "    pred_y = pred_y.cpu().data.numpy()\n",
    "\n",
    "    diff_y = pred_y[train_size:] - data_y[train_size:-1]\n",
    "    l1_loss = np.mean(np.abs(diff_y))\n",
    "    l2_loss = np.mean(diff_y ** 2)\n",
    "    print(\"L1: {:.3f}    L2: {:.3f}\".format(l1_loss, l2_loss))\n",
    "\n",
    "    plt.plot(pred_y, 'r', label='pred')\n",
    "    plt.plot(data_y, 'b', label='real', alpha=0.3)\n",
    "    plt.plot([train_size, train_size], [-1, 2], color='k', label='train | pred')\n",
    "    plt.legend(loc='best')\n",
    "    plt.savefig('lstm_reg.png')\n",
    "    plt.pause(4)\n",
    "\n",
    "\n",
    "def run_origin():\n",
    "    inp_dim = 2\n",
    "    out_dim = 1\n",
    "    mod_dir = '.'\n",
    "\n",
    "    '''load data'''\n",
    "    data = load_data()  # axis1: number, year, month\n",
    "    data_x = np.concatenate((data[:-2, 0:1], data[+1:-1, 0:1]), axis=1)\n",
    "    data_y = data[2:, 0]\n",
    "\n",
    "    train_size = int(len(data_x) * 0.75)\n",
    "    train_x = data_x[:train_size]\n",
    "    train_y = data_y[:train_size]\n",
    "\n",
    "    train_x = train_x.reshape((-1, 1, inp_dim))\n",
    "    train_y = train_y.reshape((-1, 1, out_dim))\n",
    "\n",
    "    '''build model'''\n",
    "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "    net = RegLSTM(inp_dim, out_dim, mid_dim=4, mid_layers=2).to(device)\n",
    "    criterion = nn.SmoothL1Loss()\n",
    "    optimizer = torch.optim.Adam(net.parameters(), lr=1e-2)\n",
    "\n",
    "    '''train'''\n",
    "    var_x = torch.tensor(train_x, dtype=torch.float32, device=device)\n",
    "    var_y = torch.tensor(train_y, dtype=torch.float32, device=device)\n",
    "    print('var_x.size():', var_x.size())\n",
    "    print('var_y.size():', var_y.size())\n",
    "\n",
    "    for e in range(512):\n",
    "        out = net(var_x)\n",
    "        loss = criterion(out, var_y)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        if (e + 1) % 100 == 0:  # 每 100 次输出结果\n",
    "            print('Epoch: {}, Loss: {:.5f}'.format(e + 1, loss.item()))\n",
    "\n",
    "    torch.save(net.state_dict(), '{}/net.pth'.format(mod_dir))\n",
    "\n",
    "    '''eval'''\n",
    "    # net.load_state_dict(torch.load('{}/net.pth'.format(mod_dir), map_location=lambda storage, loc: storage))\n",
    "    net = net.eval()  # 转换成测试模式\n",
    "\n",
    "    \"\"\"\n",
    "    inappropriate way of seq prediction: \n",
    "    use all real data to predict the number of next month\n",
    "    \"\"\"\n",
    "    test_x = data_x.reshape((-1, 1, inp_dim))\n",
    "    var_data = torch.tensor(test_x, dtype=torch.float32, device=device)\n",
    "    eval_y = net(var_data)  # 测试集的预测结果\n",
    "    pred_y = eval_y.view(-1).cpu().data.numpy()\n",
    "\n",
    "    plt.plot(pred_y[1:], 'r', label='pred inappr', alpha=0.3)\n",
    "    plt.plot(data_y, 'b', label='real', alpha=0.3)\n",
    "    plt.plot([train_size, train_size], [-1, 2], label='train | pred')\n",
    "\n",
    "    \"\"\"\n",
    "    appropriate way of seq prediction: \n",
    "    use real+pred data to predict the number of next 3 years.\n",
    "    \"\"\"\n",
    "    test_x = data_x.reshape((-1, 1, inp_dim))\n",
    "    test_x[train_size:] = 0  # delete the data of next 3 years.\n",
    "    test_x = torch.tensor(test_x, dtype=torch.float32, device=device)\n",
    "    for i in range(train_size, len(data) - 2):\n",
    "        test_y = net(test_x[:i])\n",
    "        test_x[i, 0, 0] = test_x[i - 1, 0, 1]\n",
    "        test_x[i, 0, 1] = test_y[-1, 0]\n",
    "    pred_y = test_x.cpu().data.numpy()\n",
    "    pred_y = pred_y[:, 0, 0]\n",
    "    plt.plot(pred_y[2:], 'g', label='pred appr')\n",
    "\n",
    "    plt.legend(loc='best')\n",
    "    plt.savefig('lstm_origin.png')\n",
    "    plt.pause(4)\n",
    "\n",
    "\n",
    "class RegLSTM(nn.Module):\n",
    "    def __init__(self, inp_dim, out_dim, mid_dim, mid_layers):\n",
    "        super(RegLSTM, self).__init__()\n",
    "\n",
    "        self.rnn = nn.LSTM(inp_dim, mid_dim, mid_layers)  # rnn\n",
    "        self.reg = nn.Sequential(\n",
    "            nn.Linear(mid_dim, mid_dim),\n",
    "            nn.Tanh(),\n",
    "            nn.Linear(mid_dim, out_dim),\n",
    "        )  # regression\n",
    "\n",
    "    def forward(self, x):\n",
    "        y = self.rnn(x)[0]  # y, (h, c) = self.rnn(x)\n",
    "\n",
    "        seq_len, batch_size, hid_dim = y.shape\n",
    "        y = y.view(-1, hid_dim)\n",
    "        y = self.reg(y)\n",
    "        y = y.view(seq_len, batch_size, -1)\n",
    "        return y\n",
    "\n",
    "    \"\"\"\n",
    "    PyCharm Crtl+click nn.LSTM() jump to code of PyTorch:\n",
    "    Examples::\n",
    "        >>> rnn = nn.LSTM(10, 20, 2)\n",
    "        >>> input = torch.randn(5, 3, 10)\n",
    "        >>> h0 = torch.randn(2, 3, 20)\n",
    "        >>> c0 = torch.randn(2, 3, 20)\n",
    "        >>> output, (hn, cn) = rnn(input, (h0, c0))\n",
    "    \"\"\"\n",
    "\n",
    "    def output_y_hc(self, x, hc):\n",
    "        y, hc = self.rnn(x, hc)  # y, (h, c) = self.rnn(x)\n",
    "\n",
    "        seq_len, batch_size, hid_dim = y.size()\n",
    "        y = y.view(-1, hid_dim)\n",
    "        y = self.reg(y)\n",
    "        y = y.view(seq_len, batch_size, -1)\n",
    "        return y, hc\n",
    "\n",
    "\n",
    "class RegGRU(nn.Module):\n",
    "    def __init__(self, inp_dim, out_dim, mod_dim, mid_layers):\n",
    "        super(RegGRU, self).__init__()\n",
    "\n",
    "        self.rnn = nn.GRU(inp_dim, mod_dim, mid_layers)\n",
    "        self.reg = nn.Linear(mod_dim, out_dim)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x, h = self.rnn(x)  # (seq, batch, hidden)\n",
    "\n",
    "        seq_len, batch_size, hid_dim = x.shape\n",
    "        x = x.view(-1, hid_dim)\n",
    "        x = self.reg(x)\n",
    "        x = x.view(seq_len, batch_size, -1)\n",
    "        return x\n",
    "\n",
    "    def output_y_h(self, x, h):\n",
    "        y, h = self.rnn(x, h)\n",
    "\n",
    "        seq_len, batch_size, hid_dim = y.size()\n",
    "        y = y.view(-1, hid_dim)\n",
    "        y = self.reg(y)\n",
    "        y = y.view(seq_len, batch_size, -1)\n",
    "        return y, h\n",
    "\n",
    "\n",
    "def load_data():\n",
    "    # passengers number of international airline , 1949-01 ~ 1960-12 per month\n",
    "    seq_number = np.array(\n",
    "        [112., 118., 132., 129., 121., 135., 148., 148., 136., 119., 104.,\n",
    "         118., 115., 126., 141., 135., 125., 149., 170., 170., 158., 133.,\n",
    "         114., 140., 145., 150., 178., 163., 172., 178., 199., 199., 184.,\n",
    "         162., 146., 166., 171., 180., 193., 181., 183., 218., 230., 242.,\n",
    "         209., 191., 172., 194., 196., 196., 236., 235., 229., 243., 264.,\n",
    "         272., 237., 211., 180., 201., 204., 188., 235., 227., 234., 264.,\n",
    "         302., 293., 259., 229., 203., 229., 242., 233., 267., 269., 270.,\n",
    "         315., 364., 347., 312., 274., 237., 278., 284., 277., 317., 313.,\n",
    "         318., 374., 413., 405., 355., 306., 271., 306., 315., 301., 356.,\n",
    "         348., 355., 422., 465., 467., 404., 347., 305., 336., 340., 318.,\n",
    "         362., 348., 363., 435., 491., 505., 404., 359., 310., 337., 360.,\n",
    "         342., 406., 396., 420., 472., 548., 559., 463., 407., 362., 405.,\n",
    "         417., 391., 419., 461., 472., 535., 622., 606., 508., 461., 390.,\n",
    "         432.], dtype=np.float32)\n",
    "    # assert seq_number.shape == (144, )\n",
    "    # plt.plot(seq_number)\n",
    "    # plt.ion()\n",
    "    # plt.pause(1)\n",
    "    seq_number = seq_number[:, np.newaxis]\n",
    "\n",
    "    # print(repr(seq))\n",
    "    # 1949~1960, 12 years, 12*12==144 month\n",
    "    seq_year = np.arange(12)\n",
    "    seq_month = np.arange(12)\n",
    "    seq_year_month = np.transpose(\n",
    "        [np.repeat(seq_year, len(seq_month)),\n",
    "         np.tile(seq_month, len(seq_year))],\n",
    "    )  # Cartesian Product\n",
    "\n",
    "    seq = np.concatenate((seq_number, seq_year_month), axis=1)\n",
    "\n",
    "    # normalization\n",
    "    seq = (seq - seq.mean(axis=0)) / seq.std(axis=0)\n",
    "    return seq\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    run_train_lstm()\n",
    "    # run_train_gru()\n",
    "    # run_origin()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
